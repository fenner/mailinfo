#!/usr/bin/perl -s
#
# Use "-n" to not scale times but still output 'human-readable'
# Use "-g" to output a graphable format, with the form
#   <x> <roundtriptime> <lasthoptime> <prevhoptime> <...hoptime> <1sthoptime>
# so you can graph using "1:2", "1:3", "1:4"
# Use "-o" to use the date sent instead of the date received when calculating x
# Use "-d" to calculate x in fractional days
# Use "-t" to output in alternate format.
# Use "-h" to do histograms; add "-d" to do histogram per day.
#
# $Id$

@times = (31536000, 604800, 86400, 3600, 60, 1);
@names = ('y', 'w', 'd', 'h', 'm', 's');

# for histogram
@buckets = (60, 300, 900, 1800, 3600, 10800, 21600, 43200, 86400);

$dontscale = $n;
$graphoutput = $g;
$useorigdate = $o;
$usedays = $d;
$debug = $x;
$outputformat = $t;
$histogram = $h;

while (<>) {
	chop;
	($msgid,$_)=split(/\t/,$_,2);
	print("message $msgid", $outputformat ? "\n" : " ") unless ($graphoutput || $histogram);
	$lastdate = 0;
	$prevhop = "";
	@deltas = () if ($graphoutput);
	@output = ();
	print "line is >>$_<<\n" if ($debug);
	while ($_) {
		($cur, $_) = split(/\t/,$_,2);
		print "Working on >>$cur<<\n" if ($debug);
		if ($cur =~ /^date /) {
			$origdate = (split(/ /,$cur,2))[1];
			last;
		}
		($hop,$id,$date) = split(/ /,$cur);
		$lastdate = $date unless $lastdate;
		if ($prevhop) {
			if ($graphoutput) {
				# XXX deal with unknown values
				push(@deltas, $prevdate - $date);
			} else {
				hop($prevdate, $prevhop, $date, $hop);
			}
		}
		$prevhop = $hop;
		$prevdate = $date;
	}
	if ($graphoutput || ($histogram && $usedays)) {
		($min,$hr,$day,$doy) = (localtime($useorigdate ? $origdate : $lastdate))[1,2,3,7];
	}
	if ($graphoutput) {
# want hour of day in local time of lastdate (when we got it)
# use "-o" to use origdate
		next if (!$origdate);
		if ($usedays) {
			printf("%f", $doy + $hr / 24 + $min / 1440);
		} else {
			printf("%d", $hr);
		}
		grep((printf " %d", $_), $lastdate - $origdate, @deltas);
		print "\n";
	} else {
		if ($origdate > 0) {
			if ($prevdate - $origdate) {
				hop($prevdate, $prevhop, $origdate, "MUA");
			}
			hop($lastdate, "end2end", $origdate);
		}
		if ($histogram) {
			for ($i = 0; $i <= $#output; $i++) {
				if ($usedays) {
					$histo{$output[$i][1]}{$output[$i][2]}{$i+1}{$doy}{$output[$i][0]}++;
				} else {
					$histo{$output[$i][1]}{$output[$i][2]}{$i+1}{$output[$i][0]}++;
				}
			}
		} elsif ($outputformat) {
			foreach $line (reverse @output) {
				$$line[0] =~ s/([^-0-9])(\d)/$1 $2/g;
				$$line[1] =~ s/->/ -> /;
				$$line[1] =~ s/end2end/end to end/;
				printf("%12s %s\n", $$line[0], $$line[1]);
			}
		} else {
			foreach $line (reverse @output) {
				printf(" %s %s", $$line[0], $$line[1]);
			}
			print "\n";
		}
	}
}
if ($histogram) {
	# XXX
	use Data::Dumper;
	foreach $firsthop (sort keys %histo) {
	    foreach $secondhop (sort keys %{$histo{$firsthop}}) {
		foreach $hopnum (sort {$a<=>$b} keys %{$histo{$firsthop}{$secondhop}}) {
		    print "${firsthop}->${secondhop}[${hopnum}]:\n";
		    @delays = sort {$a<=>$b} keys %{$histo{$firsthop}{$secondhop}{$hopnum}};
		    $total = 0;
		    foreach $delay (@delays) {
			$total += $histo{$firsthop}{$secondhop}{$hopnum}{$delay};
		    }
		    # XXX
		    next if ($total == 0);
		    $cumulative = 0;
		    foreach $delay (@delays) {
			$bucket = $histo{$firsthop}{$secondhop}{$hopnum}{$delay};
			$cumulative += $bucket;
			printf("%-5.5s %3.3s %5d %6.1f%% %6.1f%%\n", ($delay == 9999999 ? "Over" : ($cumulative == $bucket ? "Under" : "")), ($delay == 9999999 ? "1d" : scaletime($delay)), $bucket, $bucket * 100.0 / $total, $cumulative * 100.0 / $total);
		    }
		    print "\n";
		}
	    }
	}
	#print Dumper(\%histo);
}

sub bucket {
	local($prevdate, $date) = @_;
	local($b);
	if ($prevdate == -1 || $date == -1) {
		return 0;
	}
	foreach $b (@buckets) {
		return $b if ($b > ($prevdate - $date));
	}
	return 9999999;
}
sub hop {
	local($prevdate, $prevhop, $date, $hop) = @_;

	if ($histogram) {
		push(@output, [ bucket($prevdate, $date), $hop, $prevhop ]);
	} else {
		push(@output, [($prevdate == -1 || $date == -1) ?
					"?" : &scaletime($prevdate - $date),
				($hop) ? "${hop}->${prevhop}" : $prevhop]);
	}
}

sub scaletime {
	local($time) = @_;
	local($retval) = "";

	return $time if ($dontscale);

	if ($time < 0) {
		$retval = "-";
		$time = -$time;
	}
	for ($i = 0; $i <= $#times; $i++) {
		if ($time >= $times[$i]) {
			$retval .= sprintf("%d%s", $time / $times[$i], $names[$i]);
			$time %= $times[$i];
		}
	}
	return $retval || "0s";
}
